#BlueJ class context
comment0.params=newCanvas
comment0.target=HangmanGame(Canvas)
comment0.text=\n\ A\ class\ to\ play\ a\ game\ of\ Hangman.\n
comment1.params=isEvil
comment1.target=HangmanGame(boolean)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ HangmanGame\ when\ evil\n
comment10.params=letter
comment10.target=boolean\ checkEvilGuess(char)
comment10.text=\n\ A\ helper\ method\ (that\ could\ be\ private)\ that\ checks\ to\ see\ if\ \n\ a\ given\ letter\ is\ present\ in\ the\ target\ word,\ but\ cheats\!\ \n\ If\ so,\ all\ instances\ of\ that\ letter\ in\ the\ target\ word\ are\ revealed.\ \n\ This\ method\ cheats\ by\ picking\ a\ new\ word\ from\ the\ list\ of\ possibleWords\ when\ necessary,\ \n\ or\ trims\ down\ the\ size\ of\ possibleWords\ if\ the\ letter\ is\ correct\ \n\ @param\ Letter\ the\ letter\ being\ guessed.\n\ @return\ Whether\ or\ not\ the\ letter\ was\ found\ in\ the\ word.\n
comment11.params=
comment11.target=java.lang.String\ currentGuessString()
comment11.text=\n\ Returns\ a\ String\ representation\ of\ the\ current\ guess\ state.\n\ @return\ A\ String\ displaying\ the\ current\ guess\ of\ the\ word.\ Has\ the\ form\ "g\ _\ e\ _\ _\ ".\n
comment12.params=
comment12.target=char\ getGuess()
comment12.text=\n\ Prompts\ the\ user\ to\ provide\ a\ guessed\ letter.\n\ @return\ A\ single,\ lower-case\ char\ that\ the\ player\ guessed.\n
comment13.params=
comment13.target=void\ playGame()
comment13.text=\n\ Plays\ a\ complete\ game\ of\ Hangman.\n
comment14.params=
comment14.target=void\ setupGame()
comment14.text=\n\ Re-initializes\ variables\ for\ the\ start\ of\ a\ new\ game.\n
comment15.params=
comment15.target=void\ toggleEvil()
comment15.text=\n\ Toggles\ whether\ the\ game\ is\ evil\ or\ not\n
comment2.params=
comment2.target=HangmanGame()
comment2.text=\n\ Constructor\ for\ objects\ of\ class\ HangmanGame\n
comment3.params=debugWord
comment3.target=HangmanGame(java.lang.String)
comment3.text=\n\ Creates\ a\ new\ HangmanGame\ object,\ with\ the\ wordlist\ containing\ only\ the\ given\ debugWord.\n\ @param\ debugWord\ The\ single\ word\ in\ the\ wordlist,\ used\ for\ testing\ and\ debugging.\n
comment4.params=
comment4.target=void\ drawGallows()
comment4.text=\n\ \ \ \ /**\n\ \ \ A\ helper\ method\ (that\ could\ be\ private)\ that\ draws\ the\ gallows\ on\ the\ game's\ Canvas.\n
comment5.params=
comment5.target=void\ drawCurrentGuess()
comment5.text=\n\ A\ helper\ method\ (that\ could\ be\ private)\ that\ draws\ the\ current\ guess\ on\ the\ game's\ Canvas.\n
comment6.params=
comment6.target=void\ drawHangedMan()
comment6.text=\n\ A\ helper\ method\ (that\ could\ be\ private)\ that\ draws\ the\ hangedman\ on\ the\ game's\ Canvas.\n
comment7.params=
comment7.target=void\ redrawCanvas()
comment7.text=\n\ A\ helper\ method\ that\ clears\ and\ redraws\ the\ Canvas\ based\ on\ the\ current\ state\ of\ the\ game.\n
comment8.params=
comment8.target=java.util.ArrayList\ findPossibleMatchingWords()
comment8.text=\n\ A\ helper\ method\ (that\ could\ be\ private)\ that\ finds\ the\ list\ of\ possible\ words\ \n\ that\ match\ the\ current\ revealed\ word.\ \n\ Finds\ words\ that\ match\ every\ revealed\ character,\ \n\ and\ whose\ unrevealed\ letters\ have\ not\ previously\ been\ guessed.\ \n\ @return\ The\ list\ of\ possible\ words\ that\ match\ the\ revealed\ word\n
comment9.params=letter
comment9.target=boolean\ checkGuess(char)
comment9.text=\n\ Checks\ to\ see\ if\ a\ given\ letter\ is\ present\ in\ the\ target\ word.\n\ @param\ Letter\ the\ letter\ being\ guessed.\n\ @return\ Whether\ or\ not\ the\ letter\ was\ found\ in\ the\ word.\n
numComments=16
